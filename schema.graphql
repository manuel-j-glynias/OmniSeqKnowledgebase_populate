
directive @relation (
    name:String
    direction:String
) on FIELD_DEFINITION

interface NamedEntity {
    id: ID!
    name: String!
}

interface StatementWithEvidence {
    id: ID!
    statement: String!
    references: [Reference]! @relation(name: "REFERENCE_FOR", direction: "OUT")
}

interface Reference {
    id: ID!
    shortReference: String!
    statements_referenced: [StatementWithEvidence!]! @relation(name: "REFERENCE_FOR", direction: "IN")
}

type Author {
    id: ID!
    first_initial:  String!
    surname:  String!
    references:[LiteratureReference!]! @relation(name: "AUTHORED_BY", direction: "IN")
}

type Journal implements NamedEntity {
    id: ID!
    name: String!
}

type LiteratureReference implements Reference {
    id: ID!
    shortReference: String!
    statements_referenced: [StatementWithEvidence!]!  @relation(name: "REFERENCE_FOR", direction: "IN")
    authors : [Author!]!  @relation(name: "AUTHORED_BY", direction: "OUT")
    title:  String!
    journal:  Journal!  @relation(name: "PUBLISHED_IN", direction: "OUT")
    volume: String!
    first_page:  String!
    last_page:  String!
    publication_Year: String!
    DOI:  String
    PMID:  String
    abstract:   String
}

type InternetReference implements Reference{
    id: ID!
    shortReference: String!
    statements_referenced: [StatementWithEvidence!]!  @relation(name: "REFERENCE_FOR", direction: "IN")
    web_address: String!
    accessed_date: String!
}

type User implements NamedEntity {
    id: ID!
    name: String!
    password: String!
    isAdmin: Boolean!
    edited_Statements: [EditableStatement]! @relation(name: "EDITED_BY", direction: "IN")
}

type EditableStatement implements StatementWithEvidence{
    id: ID!
    field:  String!
    statement: String!
    editor: User! @relation(name: "EDITED_BY", direction: "OUT")
    edit_date: String!
    deleted: Boolean!
    references: [Reference]!  @relation(name: "REFERENCE_FOR", direction: "OUT")
}

type JaxGene implements NamedEntity  {
    id: ID!
    #    name == Gene Symbox
    name: String!
    #    statement = description
    description: EditableStatement!
    entrezId: String!
    jaxId:  String!
    chromosome: String!
    synonyms: [String]!
    canonicalTranscript:[String]!
}

enum Strand {
    FORWARD
    REVERSE
}

type MyGeneInfo_Gene implements NamedEntity  {
    id: ID!
    name: String!
    description: EditableStatement!
    chromosome: String!
    strand: Strand!
    start: Int
    end: Int
    synonyms: [String]!
    entrezId: String!
    uniprot_entry: Uniprot_Entry! @relation(name: "CODED_BY", direction: "IN")
}

type Uniprot_Entry implements NamedEntity {
    id: ID!
    name: String!
    function: EditableStatement!
    uniprot_id:String!
    accessionNumber: String!
    gene: MyGeneInfo_Gene! @relation(name: "CODED_BY", direction: "OUT")
}

interface Target {
    id: ID!
    name: String!
}

type OmniGene implements NamedEntity & Target  {
    id: ID!
    name: String!
    panelName: String!
    geneDescription: EditableStatement!
    oncogenicCategory: EditableStatement!
    synonymsString: EditableStatement!
    myGeneInfoGene: MyGeneInfo_Gene!
    uniprot_entry: Uniprot_Entry
    jaxGene:    JaxGene
    variants: [GenomicVariant]! @relation(name: "CODED_BY", direction: "OUT")
}

enum OmniConjunction {
    ANY
    ALL
    NONE
}

interface MarkerComponent {
    id: ID!
    name: String!
    method: EditableStatement!
}

enum DNAMarkerType {
    MicrosatelliteInstabilityLocus
    Karyotype
}

type DNAMarker implements NamedEntity & MarkerComponent {
    id: ID!
    name: String!
    method: EditableStatement!
    definition: EditableStatement!
    markerType: DNAMarkerType!
}

interface ProteinLevelAssay {
    id: ID!
    name: String!
}

enum AssayComparator {
    ABOVE
    BELOW
}

type IHC implements NamedEntity & ProteinLevelAssay {
    id: ID!
    name: String!
    antibodyClone:   String!
    comparator: AssayComparator!
    percentPositive: Int!
}

type RNASeq implements NamedEntity & ProteinLevelAssay {
    id: ID!
    name: String!
    comparator: AssayComparator!
    rankScore: Int!
}

enum ImmunePhenotype {
    AntiInflammatoryResponse,
    CancerTestisAntigen
    CheckpointBlockade_PD1_CTLA4
    CheckpointBlockade_Other
    MetabolicImmuneEscape
    MyeloidSuppression
    OtherImmunotherapyMarkers
    ProInflammatoryResponse
    T_CellPrimed
    TumorInfiltratingLymphocytes
}

enum ImmuneFunction {
    AntiInflammatory
    B_Cells
    CoInhibitory
    CoStimulatory
    CytotoxicT_Cells_T_Regs
    Immunostimulatory
    Immunosuppressive
    NK_Cells
    ProInflammatory
    Unknown
}

enum ImmuneCycleRole {
    CancerTestisAntigens
    KillingCancerCells
    T_CellInfiltration
    T_CellPriming
    T_CellRecognition
    T_CellTrafficking
}

type ProteinExpressionMarker  implements NamedEntity & MarkerComponent {
    id: ID!
    name: String!
    method: EditableStatement!
    synonymsString: EditableStatement!
    gene: OmniGene
    assay: ProteinLevelAssay!
    immunePhenotype: [ImmunePhenotype]!
    immuneFunction: [ImmuneFunction]!
    immuneCycleRole: [ImmuneCycleRole]!
}

type JaxVariant implements NamedEntity {
    id: ID!
    name: String!
    description: EditableStatement!
    jaxId:  String!
    gene: JaxGene! @relation(name: "CODED_BY", direction: "OUT")
    pDot:   String!
    cDot:   String!
    gDot:   String!
    transcript: String!
    variant_type: String!
    proteinEffect: String!
}

enum VariantType {
    SNV
    CNV
    Fusion
}

enum VariantProteinEffect {
    Gain_of_Function
    Gain_of_Function_Predicted
    Loss_of_Function
    Loss_of_Function_Predicted
    No_Effect
    Unknown
}

type GenomicVariant  implements NamedEntity & MarkerComponent {
    id: ID!
    name: String!
    method: EditableStatement!
    synonymsString: EditableStatement!
    pDot:   String!
    cDot:   String!
    gDot:   String!
    transcript: String!
    variantType:    VariantType!
    proteinEffect: VariantProteinEffect!
    gene: OmniGene! @relation(name: "CODED_BY", direction: "OUT")
    jaxVariant: JaxVariant
}

type MarkerProfile implements NamedEntity & MarkerComponent {
    id: ID!
    name: String!
    method: EditableStatement!
    conjunction: OmniConjunction!
    components: [MarkerComponent]!
    results: [OmniResult]!  @relation(name: "MARKER_FOR", direction: "IN")
}

type JaxDrugClass implements NamedEntity {
    id: ID!
    name: String!
    jaxId:  String!
    drugs: [JaxDrug]! @relation(name: "DRUG_CLASS_MEMBER", direction: "OUT")
}

type JaxDrug implements NamedEntity {
    id: ID!
    name: String!
    tradeName: String!
    jaxId:  String!
    synonyms: [String]!
    description: EditableStatement!
    drugClasses: [JaxDrugClass]! @relation(name: "DRUG_CLASS_MEMBER", direction: "IN")
}

type NCIDrug implements NamedEntity {
    id: ID!
    name: String!
    concept: String!
    definition: String!
    drugCategory: String!
    synonyms: [String]!
    annotationDate: String!
    isAntineoplastic: Boolean!
    isImmuno: Boolean!
    modulator: String!
}

interface TherapyComponent {
    id: ID!
    name: String!
    component_of: [Therapy]!
}

type DrugCategory implements NamedEntity {
    id: ID!
    name: String!
    definition: EditableStatement!
    jaxDrugClass: [JaxDrugClass]!
    drugs: [OmniDrug]! @relation(name: "DRUG_CLASS_MEMBER", direction: "OUT")
}

type OmniDrug implements NamedEntity & TherapyComponent {
    id: ID!
    name: String!
    tradeName: String!
    definition: EditableStatement!
    drugCategories: [DrugCategory]! @relation(name: "DRUG_CLASS_MEMBER", direction: "IN")
    synonymsString: EditableStatement!
    nciDrug:    NCIDrug
    jaxDrug:    JaxDrug
    component_of: [Therapy]! @relation(name: "THERAPY_COMPONENT", direction: "IN")
    target: [Target]!
}


type Therapy implements NamedEntity & TherapyComponent {
    id: ID!
    name: String!
    definition: EditableStatement!
    conjunction: OmniConjunction!
    components: [TherapyComponent]! @relation(name: "THERAPY_COMPONENT", direction: "OUT")
    component_of: [Therapy]! @relation(name: "THERAPY_COMPONENT", direction: "IN")
}


type TherapeuticIntervention implements NamedEntity {
    id: ID!
    name: String!
    definition: EditableStatement!
    therapy: Therapy!
    preceded_by: [TherapeuticIntervention]!
    followed_by: [TherapeuticIntervention]!
    concurrent_with: [TherapeuticIntervention]!
}

type JaxDisease implements NamedEntity {
    id: ID!
    name: String!
    parent: JaxDisease @relation(name: "PARENT", direction: "OUT")
    children: [JaxDisease]! @relation(name: "PARENT", direction: "IN")
}

type MCode implements NamedEntity {
    id: ID!
    name: String!
}

type OmniMap implements NamedEntity {
    id: ID!
    name: String!
    mCode: MCode!

}

type OntologicalDisease implements NamedEntity {
    id: ID!
    name: String!
    omniDisease: String!
    mCode: String!
    jaxDisease: JaxDisease
    parent: OntologicalDisease @relation(name: "PARENT", direction: "OUT")
    children: [OntologicalDisease]! @relation(name: "PARENT", direction: "IN")
    results: [OmniResult]!  @relation(name: "DISEASE", direction: "IN")
}

enum EvidenceType {
    Actionable
    Emerging
}
enum ResponseType {
    Sensitive
    NoBenefit
    Resistant
    Conflicting
}

type OmniResult implements NamedEntity {
    id: ID!
    name: String!
    description: EditableStatement!
    approvalStatus: String!
    evidenceType: EvidenceType!
    responseType: ResponseType!
    ampCapAscoTier: String!
    therapy: TherapyComponent!
    markers: [MarkerProfile]! @relation(name: "MARKER_FOR", direction: "OUT")
    diseases: [OntologicalDisease]! @relation(name: "DISEASE", direction: "OUT")
}

